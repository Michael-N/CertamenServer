/*
*   Code By Michael Sherif Naguib
*   Started September 29, 2018
*   Studying @ University of Tulsa
* */
var express = require('express');
var router = express.Router();
var mongoose = require('mongoose');
const questionModelAccess = require("../../models/questionModel.js");
const schema = require("../../schemas/generateTestRequestSchema.js");
const generateTestRequestModel = mongoose.model("generateTest",schema);
/*
* Title: generateTest
* Description: accepts parameters for generating a random test as a json object, validates the object to make sure it
*              meets base requirements, a test is generated by 'an algorithim' and sends back specific question data as a
*              list of objects and responds with an error otherwise.
* */
mongoose.connect('mongodb://localhost:27017/CertamenDatabase');
var questionModel = questionModelAccess.getModel();
router.get('/', function(req, res, next) {

    //Validate the generate test request
    var generateTestRequest = new generateTestRequestModel(req.body);
    generateTestRequest.validate((error)=>{
        try{
            //check for errors
            if(error){throw error;}

            /*
            *          Test Generation Algorithim
            *-----------------------------------------------------------------------------------------------
            * 0.) have an empty list of questions call it: A
            * 1.) have an innitial set of query conditions: Q
            * 2.) Query intersection of all the conditions
            * 3.) compose a list of these questions: N
            * 4.) put items in N in A
            * 5.) A.length > quantity (Too Many or too few questions found?)
            *
            *   5.many.0) randomize A list order
            *   5.many.1) truncate to desired ammount
            *   5.many.2) EXIT return list
            *
            *   5.few.0) if Q.length-1 =0 then EXIT return A   (there were never enough questions)
            *   5.few.1) remove next least prioritized condition from Q
            *   5.few.2) query with the new set of query conditions
            *   5.few.3) compose a new list N of these questions
            *   5.few.4) Nor item in N if it is in A remove it from N
            *   5.few.5) find C=quantity-A.length  find out how many questions still needed? call this C
            *   5.few.6) N.length > C
            *           5.few.6.many.0)  randomize N list order
            *           5.few.6.many.1)  truncate N to get C items
            *           5.few.6.many.2)  Concat A and N
            *           5.few.6.many.3)  EXIT and return List
            *
            *           5.few.6.few.0) goto sequence 4.few.1)
            *-----------------------------------------------------------------------------------------------
            *
            *   Priority of Options: (top=prioritized)
            *   -------------------
            *   latinLevel
            *   onlyNLEquestions
            *   tags
            *   difficultyRange
            *   quantity
            *
            *
            *
            * */

        }catch(error){
            console.error(`[generateTest.js] Error: ${error}`);
            res.send(question.failure(error));
            next();
        }
    });
    var question = new questionModel(req.body);
    question.save((error,questionItem)=>{
        if(error){
            console.error(`[insertQuestion.js] Error: ${error}`);
            res.send(question.failure(error));
            next();
        }else{
            console.log(`[insertQuestion.js] question with _id: ${questionItem._id} inserted`);
            res.send(question.success(questionItem._id));
            next();
        }
    });
});

module.exports = router;